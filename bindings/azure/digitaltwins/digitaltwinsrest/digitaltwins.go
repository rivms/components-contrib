package digitaltwinsrest

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
    "github.com/Azure/go-autorest/autorest/validation"
)

// DigitalTwinsClient is the a service for managing and querying digital twins and digital twin models.
type DigitalTwinsClient struct {
    BaseClient
}
// NewDigitalTwinsClient creates an instance of the DigitalTwinsClient client.
func NewDigitalTwinsClient() DigitalTwinsClient {
    return NewDigitalTwinsClientWithBaseURI(DefaultBaseURI, )
}

// NewDigitalTwinsClientWithBaseURI creates an instance of the DigitalTwinsClient client using a custom endpoint.  Use
// this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
    func NewDigitalTwinsClientWithBaseURI(baseURI string, ) DigitalTwinsClient {
        return DigitalTwinsClient{ NewWithBaseURI(baseURI, )}
    }

// Add adds or replaces a digital twin.
// Status codes:
// * 200 OK
// * 400 Bad Request
// * InvalidArgument - The digital twin id or payload is invalid.
// * ModelDecommissioned - The model for the digital twin is decommissioned.
// * TwinLimitReached - The maximum number of digital twins allowed has been reached.
// * ValidationFailed - The digital twin payload is not valid.
// * 412 Precondition Failed
// * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
    // Parameters:
        // ID - the id of the digital twin. The id is unique within the service and case sensitive.
        // twin - the digital twin instance being added. If provided, the $dtId property is ignored.
        // ifNoneMatch - only perform the operation if the entity does not already exist.
        // traceparent - identifies the request in a distributed tracing system.
        // tracestate - provides vendor-specific trace identification information and is a companion to traceparent.
func (client DigitalTwinsClient) Add(ctx context.Context, ID string, twin interface{}, ifNoneMatch string, traceparent string, tracestate string) (result SetObject, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinsClient.Add")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.AddPreparer(ctx, ID, twin, ifNoneMatch, traceparent, tracestate)
    if err != nil {
    err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "Add", nil , "Failure preparing request")
    return
    }

        resp, err := client.AddSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "Add", resp, "Failure sending request")
        return
        }

        result, err = client.AddResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "Add", resp, "Failure responding to request")
        return
        }

    return
}

    // AddPreparer prepares the Add request.
    func (client DigitalTwinsClient) AddPreparer(ctx context.Context, ID string, twin interface{}, ifNoneMatch string, traceparent string, tracestate string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        }

            const APIVersion = "2020-10-31"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json; charset=utf-8"),
autorest.AsPut(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/digitaltwins/{id}",pathParameters),
autorest.WithJSON(twin),
autorest.WithQueryParameters(queryParameters))
        if len(string(ifNoneMatch)) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("If-None-Match",autorest.String(ifNoneMatch)))
        }
        if len(traceparent) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("traceparent",autorest.String(traceparent)))
        }
        if len(tracestate) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("tracestate",autorest.String(tracestate)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // AddSender sends the Add request. The method will close the
    // http.Response Body if it receives an error.
    func (client DigitalTwinsClient) AddSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // AddResponder handles the response to the Add request. The method always
    // closes the http.Response Body.
    func (client DigitalTwinsClient) AddResponder(resp *http.Response) (result SetObject, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusAccepted),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// AddRelationship adds a relationship between two digital twins.
// Status codes:
// * 200 OK
// * 400 Bad Request
// * InvalidArgument - The digital twin id, relationship id, or payload is invalid.
// * InvalidRelationship - The relationship is invalid.
// * OperationNotAllowed - The relationship cannot connect to the same digital twin.
// * ValidationFailed - The relationship content is invalid.
// * 404 Not Found
// * DigitalTwinNotFound - The digital twin was not found.
// * TargetTwinNotFound - The digital twin target of the relationship was not found.
// * 412 Precondition Failed
// * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
    // Parameters:
        // ID - the id of the digital twin. The id is unique within the service and case sensitive.
        // relationshipID - the id of the relationship. The id is unique within the digital twin and case sensitive.
        // relationship - the data for the relationship.
        // ifNoneMatch - only perform the operation if the entity does not already exist.
        // traceparent - identifies the request in a distributed tracing system.
        // tracestate - provides vendor-specific trace identification information and is a companion to traceparent.
func (client DigitalTwinsClient) AddRelationship(ctx context.Context, ID string, relationshipID string, relationship interface{}, ifNoneMatch string, traceparent string, tracestate string) (result SetObject, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinsClient.AddRelationship")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.AddRelationshipPreparer(ctx, ID, relationshipID, relationship, ifNoneMatch, traceparent, tracestate)
    if err != nil {
    err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "AddRelationship", nil , "Failure preparing request")
    return
    }

        resp, err := client.AddRelationshipSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "AddRelationship", resp, "Failure sending request")
        return
        }

        result, err = client.AddRelationshipResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "AddRelationship", resp, "Failure responding to request")
        return
        }

    return
}

    // AddRelationshipPreparer prepares the AddRelationship request.
    func (client DigitalTwinsClient) AddRelationshipPreparer(ctx context.Context, ID string, relationshipID string, relationship interface{}, ifNoneMatch string, traceparent string, tracestate string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        "relationshipId": autorest.Encode("path",relationshipID),
        }

            const APIVersion = "2020-10-31"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json; charset=utf-8"),
autorest.AsPut(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/digitaltwins/{id}/relationships/{relationshipId}",pathParameters),
autorest.WithJSON(relationship),
autorest.WithQueryParameters(queryParameters))
        if len(string(ifNoneMatch)) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("If-None-Match",autorest.String(ifNoneMatch)))
        }
        if len(traceparent) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("traceparent",autorest.String(traceparent)))
        }
        if len(tracestate) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("tracestate",autorest.String(tracestate)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // AddRelationshipSender sends the AddRelationship request. The method will close the
    // http.Response Body if it receives an error.
    func (client DigitalTwinsClient) AddRelationshipSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // AddRelationshipResponder handles the response to the AddRelationship request. The method always
    // closes the http.Response Body.
    func (client DigitalTwinsClient) AddRelationshipResponder(resp *http.Response) (result SetObject, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// Delete deletes a digital twin. All relationships referencing the digital twin must already be deleted.
// Status codes:
// * 204 No Content
// * 400 Bad Request
// * InvalidArgument - The digital twin id is invalid.
// * RelationshipsNotDeleted - The digital twin contains relationships.
// * 404 Not Found
// * DigitalTwinNotFound - The digital twin was not found.
// * 412 Precondition Failed
// * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
    // Parameters:
        // ID - the id of the digital twin. The id is unique within the service and case sensitive.
        // ifMatch - only perform the operation if the entity's etag matches one of the etags provided or * is
        // provided.
        // traceparent - identifies the request in a distributed tracing system.
        // tracestate - provides vendor-specific trace identification information and is a companion to traceparent.
func (client DigitalTwinsClient) Delete(ctx context.Context, ID string, ifMatch string, traceparent string, tracestate string) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinsClient.Delete")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.DeletePreparer(ctx, ID, ifMatch, traceparent, tracestate)
    if err != nil {
    err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "Delete", nil , "Failure preparing request")
    return
    }

        resp, err := client.DeleteSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "Delete", resp, "Failure sending request")
        return
        }

        result, err = client.DeleteResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "Delete", resp, "Failure responding to request")
        return
        }

    return
}

    // DeletePreparer prepares the Delete request.
    func (client DigitalTwinsClient) DeletePreparer(ctx context.Context, ID string, ifMatch string, traceparent string, tracestate string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        }

            const APIVersion = "2020-10-31"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsDelete(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/digitaltwins/{id}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(ifMatch) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("If-Match",autorest.String(ifMatch)))
        }
        if len(traceparent) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("traceparent",autorest.String(traceparent)))
        }
        if len(tracestate) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("tracestate",autorest.String(tracestate)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // DeleteSender sends the Delete request. The method will close the
    // http.Response Body if it receives an error.
    func (client DigitalTwinsClient) DeleteSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // DeleteResponder handles the response to the Delete request. The method always
    // closes the http.Response Body.
    func (client DigitalTwinsClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// DeleteRelationship deletes a relationship between two digital twins.
// Status codes:
// * 204 No Content
// * 400 Bad Request
// * InvalidArgument - The digital twin id or relationship id is invalid.
// * 404 Not Found
// * DigitalTwinNotFound - The digital twin was not found.
// * RelationshipNotFound - The relationship was not found.
// * 412 Precondition Failed
// * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
    // Parameters:
        // ID - the id of the digital twin. The id is unique within the service and case sensitive.
        // relationshipID - the id of the relationship. The id is unique within the digital twin and case sensitive.
        // ifMatch - only perform the operation if the entity's etag matches one of the etags provided or * is
        // provided.
        // traceparent - identifies the request in a distributed tracing system.
        // tracestate - provides vendor-specific trace identification information and is a companion to traceparent.
func (client DigitalTwinsClient) DeleteRelationship(ctx context.Context, ID string, relationshipID string, ifMatch string, traceparent string, tracestate string) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinsClient.DeleteRelationship")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.DeleteRelationshipPreparer(ctx, ID, relationshipID, ifMatch, traceparent, tracestate)
    if err != nil {
    err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "DeleteRelationship", nil , "Failure preparing request")
    return
    }

        resp, err := client.DeleteRelationshipSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "DeleteRelationship", resp, "Failure sending request")
        return
        }

        result, err = client.DeleteRelationshipResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "DeleteRelationship", resp, "Failure responding to request")
        return
        }

    return
}

    // DeleteRelationshipPreparer prepares the DeleteRelationship request.
    func (client DigitalTwinsClient) DeleteRelationshipPreparer(ctx context.Context, ID string, relationshipID string, ifMatch string, traceparent string, tracestate string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        "relationshipId": autorest.Encode("path",relationshipID),
        }

            const APIVersion = "2020-10-31"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsDelete(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/digitaltwins/{id}/relationships/{relationshipId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(ifMatch) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("If-Match",autorest.String(ifMatch)))
        }
        if len(traceparent) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("traceparent",autorest.String(traceparent)))
        }
        if len(tracestate) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("tracestate",autorest.String(tracestate)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // DeleteRelationshipSender sends the DeleteRelationship request. The method will close the
    // http.Response Body if it receives an error.
    func (client DigitalTwinsClient) DeleteRelationshipSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // DeleteRelationshipResponder handles the response to the DeleteRelationship request. The method always
    // closes the http.Response Body.
    func (client DigitalTwinsClient) DeleteRelationshipResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// GetByID retrieves a digital twin.
// Status codes:
// * 200 OK
// * 400 Bad Request
// * InvalidArgument - The digital twin id is invalid.
// * 404 Not Found
// * DigitalTwinNotFound - The digital twin was not found.
    // Parameters:
        // ID - the id of the digital twin. The id is unique within the service and case sensitive.
        // traceparent - identifies the request in a distributed tracing system.
        // tracestate - provides vendor-specific trace identification information and is a companion to traceparent.
func (client DigitalTwinsClient) GetByID(ctx context.Context, ID string, traceparent string, tracestate string) (result SetObject, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinsClient.GetByID")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetByIDPreparer(ctx, ID, traceparent, tracestate)
    if err != nil {
    err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "GetByID", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetByIDSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "GetByID", resp, "Failure sending request")
        return
        }

        result, err = client.GetByIDResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "GetByID", resp, "Failure responding to request")
        return
        }

    return
}

    // GetByIDPreparer prepares the GetByID request.
    func (client DigitalTwinsClient) GetByIDPreparer(ctx context.Context, ID string, traceparent string, tracestate string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        }

            const APIVersion = "2020-10-31"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/digitaltwins/{id}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(traceparent) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("traceparent",autorest.String(traceparent)))
        }
        if len(tracestate) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("tracestate",autorest.String(tracestate)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetByIDSender sends the GetByID request. The method will close the
    // http.Response Body if it receives an error.
    func (client DigitalTwinsClient) GetByIDSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetByIDResponder handles the response to the GetByID request. The method always
    // closes the http.Response Body.
    func (client DigitalTwinsClient) GetByIDResponder(resp *http.Response) (result SetObject, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetComponent retrieves a component from a digital twin.
// Status codes:
// * 200 OK
// * 400 Bad Request
// * InvalidArgument - The digital twin id or component path is invalid.
// * 404 Not Found
// * DigitalTwinNotFound - The digital twin was not found.
// * ComponentNotFound - The component path was not found.
    // Parameters:
        // ID - the id of the digital twin. The id is unique within the service and case sensitive.
        // componentPath - the name of the DTDL component.
        // traceparent - identifies the request in a distributed tracing system.
        // tracestate - provides vendor-specific trace identification information and is a companion to traceparent.
func (client DigitalTwinsClient) GetComponent(ctx context.Context, ID string, componentPath string, traceparent string, tracestate string) (result SetObject, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinsClient.GetComponent")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetComponentPreparer(ctx, ID, componentPath, traceparent, tracestate)
    if err != nil {
    err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "GetComponent", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetComponentSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "GetComponent", resp, "Failure sending request")
        return
        }

        result, err = client.GetComponentResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "GetComponent", resp, "Failure responding to request")
        return
        }

    return
}

    // GetComponentPreparer prepares the GetComponent request.
    func (client DigitalTwinsClient) GetComponentPreparer(ctx context.Context, ID string, componentPath string, traceparent string, tracestate string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "componentPath": autorest.Encode("path",componentPath),
        "id": autorest.Encode("path",ID),
        }

            const APIVersion = "2020-10-31"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/digitaltwins/{id}/components/{componentPath}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(traceparent) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("traceparent",autorest.String(traceparent)))
        }
        if len(tracestate) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("tracestate",autorest.String(tracestate)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetComponentSender sends the GetComponent request. The method will close the
    // http.Response Body if it receives an error.
    func (client DigitalTwinsClient) GetComponentSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetComponentResponder handles the response to the GetComponent request. The method always
    // closes the http.Response Body.
    func (client DigitalTwinsClient) GetComponentResponder(resp *http.Response) (result SetObject, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetRelationshipByID retrieves a relationship between two digital twins.
// Status codes:
// * 200 OK
// * 400 Bad Request
// * InvalidArgument - The digital twin id or relationship id is invalid.
// * 404 Not Found
// * DigitalTwinNotFound - The digital twin was not found.
// * RelationshipNotFound - The relationship was not found.
    // Parameters:
        // ID - the id of the digital twin. The id is unique within the service and case sensitive.
        // relationshipID - the id of the relationship. The id is unique within the digital twin and case sensitive.
        // traceparent - identifies the request in a distributed tracing system.
        // tracestate - provides vendor-specific trace identification information and is a companion to traceparent.
func (client DigitalTwinsClient) GetRelationshipByID(ctx context.Context, ID string, relationshipID string, traceparent string, tracestate string) (result SetObject, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinsClient.GetRelationshipByID")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetRelationshipByIDPreparer(ctx, ID, relationshipID, traceparent, tracestate)
    if err != nil {
    err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "GetRelationshipByID", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetRelationshipByIDSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "GetRelationshipByID", resp, "Failure sending request")
        return
        }

        result, err = client.GetRelationshipByIDResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "GetRelationshipByID", resp, "Failure responding to request")
        return
        }

    return
}

    // GetRelationshipByIDPreparer prepares the GetRelationshipByID request.
    func (client DigitalTwinsClient) GetRelationshipByIDPreparer(ctx context.Context, ID string, relationshipID string, traceparent string, tracestate string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        "relationshipId": autorest.Encode("path",relationshipID),
        }

            const APIVersion = "2020-10-31"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/digitaltwins/{id}/relationships/{relationshipId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(traceparent) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("traceparent",autorest.String(traceparent)))
        }
        if len(tracestate) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("tracestate",autorest.String(tracestate)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetRelationshipByIDSender sends the GetRelationshipByID request. The method will close the
    // http.Response Body if it receives an error.
    func (client DigitalTwinsClient) GetRelationshipByIDSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetRelationshipByIDResponder handles the response to the GetRelationshipByID request. The method always
    // closes the http.Response Body.
    func (client DigitalTwinsClient) GetRelationshipByIDResponder(resp *http.Response) (result SetObject, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// ListIncomingRelationships retrieves all incoming relationship for a digital twin.
// Status codes:
// * 200 OK
// * 400 Bad Request
// * InvalidArgument - The digital twin id is invalid.
// * 404 Not Found
// * DigitalTwinNotFound - The digital twin was not found.
    // Parameters:
        // ID - the id of the digital twin. The id is unique within the service and case sensitive.
        // traceparent - identifies the request in a distributed tracing system.
        // tracestate - provides vendor-specific trace identification information and is a companion to traceparent.
func (client DigitalTwinsClient) ListIncomingRelationships(ctx context.Context, ID string, traceparent string, tracestate string) (result IncomingRelationshipCollectionPage, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinsClient.ListIncomingRelationships")
        defer func() {
            sc := -1
        if result.irc.Response.Response != nil {
        sc = result.irc.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        result.fn = client.listIncomingRelationshipsNextResults
    req, err := client.ListIncomingRelationshipsPreparer(ctx, ID, traceparent, tracestate)
    if err != nil {
    err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "ListIncomingRelationships", nil , "Failure preparing request")
    return
    }

        resp, err := client.ListIncomingRelationshipsSender(req)
        if err != nil {
        result.irc.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "ListIncomingRelationships", resp, "Failure sending request")
        return
        }

        result.irc, err = client.ListIncomingRelationshipsResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "ListIncomingRelationships", resp, "Failure responding to request")
        return
        }
            if result.irc.hasNextLink() && result.irc.IsEmpty() {
            err = result.NextWithContext(ctx)
            return
            }

    return
}

    // ListIncomingRelationshipsPreparer prepares the ListIncomingRelationships request.
    func (client DigitalTwinsClient) ListIncomingRelationshipsPreparer(ctx context.Context, ID string, traceparent string, tracestate string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        }

            const APIVersion = "2020-10-31"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/digitaltwins/{id}/incomingrelationships",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(traceparent) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("traceparent",autorest.String(traceparent)))
        }
        if len(tracestate) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("tracestate",autorest.String(tracestate)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // ListIncomingRelationshipsSender sends the ListIncomingRelationships request. The method will close the
    // http.Response Body if it receives an error.
    func (client DigitalTwinsClient) ListIncomingRelationshipsSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // ListIncomingRelationshipsResponder handles the response to the ListIncomingRelationships request. The method always
    // closes the http.Response Body.
    func (client DigitalTwinsClient) ListIncomingRelationshipsResponder(resp *http.Response) (result IncomingRelationshipCollection, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

            // listIncomingRelationshipsNextResults retrieves the next set of results, if any.
            func (client DigitalTwinsClient) listIncomingRelationshipsNextResults(ctx context.Context, lastResults IncomingRelationshipCollection) (result IncomingRelationshipCollection, err error) {
            req, err := lastResults.incomingRelationshipCollectionPreparer(ctx)
            if err != nil {
            return result, autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "listIncomingRelationshipsNextResults", nil , "Failure preparing next results request")
            }
            if req == nil {
            return
            }
            resp, err := client.ListIncomingRelationshipsSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            return result, autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "listIncomingRelationshipsNextResults", resp, "Failure sending next results request")
            }
            result, err = client.ListIncomingRelationshipsResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "listIncomingRelationshipsNextResults", resp, "Failure responding to next results request")
            }
            return
                    }

            // ListIncomingRelationshipsComplete enumerates all values, automatically crossing page boundaries as required.
            func (client DigitalTwinsClient) ListIncomingRelationshipsComplete(ctx context.Context, ID string, traceparent string, tracestate string) (result IncomingRelationshipCollectionIterator, err error) {
            if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinsClient.ListIncomingRelationships")
            defer func() {
            sc := -1
            if result.Response().Response.Response != nil {
            sc = result.page.Response().Response.Response.StatusCode
            }
            tracing.EndSpan(ctx, sc, err)
            }()
            }
                    result.page, err = client.ListIncomingRelationships(ctx, ID, traceparent, tracestate)
                            return
            }

// ListRelationships retrieves the relationships from a digital twin.
// Status codes:
// * 200 OK
// * 400 Bad Request
// * InvalidArgument - The digital twin id is invalid.
// * 404 Not Found
// * DigitalTwinNotFound - The digital twin was not found.
    // Parameters:
        // ID - the id of the digital twin. The id is unique within the service and case sensitive.
        // relationshipName - the name of the relationship.
        // traceparent - identifies the request in a distributed tracing system.
        // tracestate - provides vendor-specific trace identification information and is a companion to traceparent.
func (client DigitalTwinsClient) ListRelationships(ctx context.Context, ID string, relationshipName string, traceparent string, tracestate string) (result RelationshipCollectionPage, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinsClient.ListRelationships")
        defer func() {
            sc := -1
        if result.rc.Response.Response != nil {
        sc = result.rc.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        result.fn = client.listRelationshipsNextResults
    req, err := client.ListRelationshipsPreparer(ctx, ID, relationshipName, traceparent, tracestate)
    if err != nil {
    err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "ListRelationships", nil , "Failure preparing request")
    return
    }

        resp, err := client.ListRelationshipsSender(req)
        if err != nil {
        result.rc.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "ListRelationships", resp, "Failure sending request")
        return
        }

        result.rc, err = client.ListRelationshipsResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "ListRelationships", resp, "Failure responding to request")
        return
        }
            if result.rc.hasNextLink() && result.rc.IsEmpty() {
            err = result.NextWithContext(ctx)
            return
            }

    return
}

    // ListRelationshipsPreparer prepares the ListRelationships request.
    func (client DigitalTwinsClient) ListRelationshipsPreparer(ctx context.Context, ID string, relationshipName string, traceparent string, tracestate string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        }

            const APIVersion = "2020-10-31"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(relationshipName) > 0 {
        queryParameters["relationshipName"] = autorest.Encode("query",relationshipName)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/digitaltwins/{id}/relationships",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(traceparent) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("traceparent",autorest.String(traceparent)))
        }
        if len(tracestate) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("tracestate",autorest.String(tracestate)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // ListRelationshipsSender sends the ListRelationships request. The method will close the
    // http.Response Body if it receives an error.
    func (client DigitalTwinsClient) ListRelationshipsSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // ListRelationshipsResponder handles the response to the ListRelationships request. The method always
    // closes the http.Response Body.
    func (client DigitalTwinsClient) ListRelationshipsResponder(resp *http.Response) (result RelationshipCollection, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

            // listRelationshipsNextResults retrieves the next set of results, if any.
            func (client DigitalTwinsClient) listRelationshipsNextResults(ctx context.Context, lastResults RelationshipCollection) (result RelationshipCollection, err error) {
            req, err := lastResults.relationshipCollectionPreparer(ctx)
            if err != nil {
            return result, autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "listRelationshipsNextResults", nil , "Failure preparing next results request")
            }
            if req == nil {
            return
            }
            resp, err := client.ListRelationshipsSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            return result, autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "listRelationshipsNextResults", resp, "Failure sending next results request")
            }
            result, err = client.ListRelationshipsResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "listRelationshipsNextResults", resp, "Failure responding to next results request")
            }
            return
                    }

            // ListRelationshipsComplete enumerates all values, automatically crossing page boundaries as required.
            func (client DigitalTwinsClient) ListRelationshipsComplete(ctx context.Context, ID string, relationshipName string, traceparent string, tracestate string) (result RelationshipCollectionIterator, err error) {
            if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinsClient.ListRelationships")
            defer func() {
            sc := -1
            if result.Response().Response.Response != nil {
            sc = result.page.Response().Response.Response.StatusCode
            }
            tracing.EndSpan(ctx, sc, err)
            }()
            }
                    result.page, err = client.ListRelationships(ctx, ID, relationshipName, traceparent, tracestate)
                            return
            }

// SendComponentTelemetry sends telemetry on behalf of a component in a digital twin.
// Status codes:
// * 204 No Content
// * 400 Bad Request
// * InvalidArgument - The digital twin id, message id, or component path is invalid.
// * ValidationFailed - The telemetry content is invalid.
// * 404 Not Found
// * DigitalTwinNotFound - The digital twin was not found.
// * ComponentNotFound - The component path was not found.
    // Parameters:
        // ID - the id of the digital twin. The id is unique within the service and case sensitive.
        // componentPath - the name of the DTDL component.
        // telemetry - the telemetry measurements to send from the digital twin's component.
        // messageID - a unique message identifier (in the scope of the digital twin id) that is commonly used for
        // de-duplicating messages.
        // telemetrySourceTime - an RFC 3339 timestamp that identifies the time the telemetry was measured.
        // traceparent - identifies the request in a distributed tracing system.
        // tracestate - provides vendor-specific trace identification information and is a companion to traceparent.
func (client DigitalTwinsClient) SendComponentTelemetry(ctx context.Context, ID string, componentPath string, telemetry interface{}, messageID string, telemetrySourceTime string, traceparent string, tracestate string) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinsClient.SendComponentTelemetry")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.SendComponentTelemetryPreparer(ctx, ID, componentPath, telemetry, messageID, telemetrySourceTime, traceparent, tracestate)
    if err != nil {
    err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "SendComponentTelemetry", nil , "Failure preparing request")
    return
    }

        resp, err := client.SendComponentTelemetrySender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "SendComponentTelemetry", resp, "Failure sending request")
        return
        }

        result, err = client.SendComponentTelemetryResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "SendComponentTelemetry", resp, "Failure responding to request")
        return
        }

    return
}

    // SendComponentTelemetryPreparer prepares the SendComponentTelemetry request.
    func (client DigitalTwinsClient) SendComponentTelemetryPreparer(ctx context.Context, ID string, componentPath string, telemetry interface{}, messageID string, telemetrySourceTime string, traceparent string, tracestate string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "componentPath": autorest.Encode("path",componentPath),
        "id": autorest.Encode("path",ID),
        }

            const APIVersion = "2020-10-31"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json; charset=utf-8"),
autorest.AsPost(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/digitaltwins/{id}/components/{componentPath}/telemetry",pathParameters),
autorest.WithJSON(telemetry),
autorest.WithQueryParameters(queryParameters),
autorest.WithHeader("Message-Id", autorest.String(messageID)))
        if len(telemetrySourceTime) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("Telemetry-Source-Time",autorest.String(telemetrySourceTime)))
        }
        if len(traceparent) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("traceparent",autorest.String(traceparent)))
        }
        if len(tracestate) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("tracestate",autorest.String(tracestate)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // SendComponentTelemetrySender sends the SendComponentTelemetry request. The method will close the
    // http.Response Body if it receives an error.
    func (client DigitalTwinsClient) SendComponentTelemetrySender(req *http.Request) (*http.Response, error) {
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // SendComponentTelemetryResponder handles the response to the SendComponentTelemetry request. The method always
    // closes the http.Response Body.
    func (client DigitalTwinsClient) SendComponentTelemetryResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// SendTelemetry sends telemetry on behalf of a digital twin.
// Status codes:
// * 204 No Content
// * 400 Bad Request
// * InvalidArgument - The digital twin id or message id is invalid.
// * ValidationFailed - The telemetry content is invalid.
// * 404 Not Found
// * DigitalTwinNotFound - The digital twin was not found.
    // Parameters:
        // ID - the id of the digital twin. The id is unique within the service and case sensitive.
        // telemetry - the telemetry measurements to send from the digital twin.
        // messageID - a unique message identifier (in the scope of the digital twin id) that is commonly used for
        // de-duplicating messages.
        // telemetrySourceTime - an RFC 3339 timestamp that identifies the time the telemetry was measured.
        // traceparent - identifies the request in a distributed tracing system.
        // tracestate - provides vendor-specific trace identification information and is a companion to traceparent.
func (client DigitalTwinsClient) SendTelemetry(ctx context.Context, ID string, telemetry interface{}, messageID string, telemetrySourceTime string, traceparent string, tracestate string) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinsClient.SendTelemetry")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.SendTelemetryPreparer(ctx, ID, telemetry, messageID, telemetrySourceTime, traceparent, tracestate)
    if err != nil {
    err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "SendTelemetry", nil , "Failure preparing request")
    return
    }

        resp, err := client.SendTelemetrySender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "SendTelemetry", resp, "Failure sending request")
        return
        }

        result, err = client.SendTelemetryResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "SendTelemetry", resp, "Failure responding to request")
        return
        }

    return
}

    // SendTelemetryPreparer prepares the SendTelemetry request.
    func (client DigitalTwinsClient) SendTelemetryPreparer(ctx context.Context, ID string, telemetry interface{}, messageID string, telemetrySourceTime string, traceparent string, tracestate string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        }

            const APIVersion = "2020-10-31"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json; charset=utf-8"),
autorest.AsPost(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/digitaltwins/{id}/telemetry",pathParameters),
autorest.WithJSON(telemetry),
autorest.WithQueryParameters(queryParameters),
autorest.WithHeader("Message-Id", autorest.String(messageID)))
        if len(telemetrySourceTime) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("Telemetry-Source-Time",autorest.String(telemetrySourceTime)))
        }
        if len(traceparent) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("traceparent",autorest.String(traceparent)))
        }
        if len(tracestate) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("tracestate",autorest.String(tracestate)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // SendTelemetrySender sends the SendTelemetry request. The method will close the
    // http.Response Body if it receives an error.
    func (client DigitalTwinsClient) SendTelemetrySender(req *http.Request) (*http.Response, error) {
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // SendTelemetryResponder handles the response to the SendTelemetry request. The method always
    // closes the http.Response Body.
    func (client DigitalTwinsClient) SendTelemetryResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// Update updates a digital twin.
// Status codes:
// * 204 No Content
// * 400 Bad Request
// * InvalidArgument - The digital twin id or payload is invalid.
// * JsonPatchInvalid - The JSON Patch provided is invalid.
// * ValidationFailed - Applying the patch results in an invalid digital twin.
// * 404 Not Found
// * DigitalTwinNotFound - The digital twin was not found.
// * 412 Precondition Failed
// * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
    // Parameters:
        // ID - the id of the digital twin. The id is unique within the service and case sensitive.
        // patchDocument - an update specification described by JSON Patch. Updates to property values and $model
        // elements may happen in the same request. Operations are limited to add, replace and remove.
        // ifMatch - only perform the operation if the entity's etag matches one of the etags provided or * is
        // provided.
        // traceparent - identifies the request in a distributed tracing system.
        // tracestate - provides vendor-specific trace identification information and is a companion to traceparent.
func (client DigitalTwinsClient) Update(ctx context.Context, ID string, patchDocument []interface{}, ifMatch string, traceparent string, tracestate string) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinsClient.Update")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        if err := validation.Validate([]validation.Validation{
        { TargetValue: patchDocument,
         Constraints: []validation.Constraint{	{Target: "patchDocument", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
        return result, validation.NewError("digitaltwinsrest.DigitalTwinsClient", "Update", err.Error())
        }

        req, err := client.UpdatePreparer(ctx, ID, patchDocument, ifMatch, traceparent, tracestate)
    if err != nil {
    err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "Update", nil , "Failure preparing request")
    return
    }

        resp, err := client.UpdateSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "Update", resp, "Failure sending request")
        return
        }

        result, err = client.UpdateResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "Update", resp, "Failure responding to request")
        return
        }

    return
}

    // UpdatePreparer prepares the Update request.
    func (client DigitalTwinsClient) UpdatePreparer(ctx context.Context, ID string, patchDocument []interface{}, ifMatch string, traceparent string, tracestate string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        }

            const APIVersion = "2020-10-31"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json-patch+json; charset=utf-8"),
autorest.AsPatch(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/digitaltwins/{id}",pathParameters),
autorest.WithJSON(patchDocument),
autorest.WithQueryParameters(queryParameters))
        if len(ifMatch) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("If-Match",autorest.String(ifMatch)))
        }
        if len(traceparent) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("traceparent",autorest.String(traceparent)))
        }
        if len(tracestate) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("tracestate",autorest.String(tracestate)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // UpdateSender sends the Update request. The method will close the
    // http.Response Body if it receives an error.
    func (client DigitalTwinsClient) UpdateSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // UpdateResponder handles the response to the Update request. The method always
    // closes the http.Response Body.
    func (client DigitalTwinsClient) UpdateResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusAccepted,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// UpdateComponent updates a component on a digital twin.
// Status codes:
// * 204 No Content
// * 400 Bad Request
// * InvalidArgument - The digital twin id, component path, or payload is invalid.
// * JsonPatchInvalid - The JSON Patch provided is invalid.
// * ValidationFailed - Applying the patch results in an invalid digital twin.
// * 404 Not Found
// * DigitalTwinNotFound - The digital twin was not found.
// * 412 Precondition Failed
// * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
    // Parameters:
        // ID - the id of the digital twin. The id is unique within the service and case sensitive.
        // componentPath - the name of the DTDL component.
        // patchDocument - an update specification described by JSON Patch. Updates to property values and $model
        // elements may happen in the same request. Operations are limited to add, replace and remove.
        // ifMatch - only perform the operation if the entity's etag matches one of the etags provided or * is
        // provided.
        // traceparent - identifies the request in a distributed tracing system.
        // tracestate - provides vendor-specific trace identification information and is a companion to traceparent.
func (client DigitalTwinsClient) UpdateComponent(ctx context.Context, ID string, componentPath string, patchDocument []interface{}, ifMatch string, traceparent string, tracestate string) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinsClient.UpdateComponent")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        if err := validation.Validate([]validation.Validation{
        { TargetValue: patchDocument,
         Constraints: []validation.Constraint{	{Target: "patchDocument", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
        return result, validation.NewError("digitaltwinsrest.DigitalTwinsClient", "UpdateComponent", err.Error())
        }

        req, err := client.UpdateComponentPreparer(ctx, ID, componentPath, patchDocument, ifMatch, traceparent, tracestate)
    if err != nil {
    err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "UpdateComponent", nil , "Failure preparing request")
    return
    }

        resp, err := client.UpdateComponentSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "UpdateComponent", resp, "Failure sending request")
        return
        }

        result, err = client.UpdateComponentResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "UpdateComponent", resp, "Failure responding to request")
        return
        }

    return
}

    // UpdateComponentPreparer prepares the UpdateComponent request.
    func (client DigitalTwinsClient) UpdateComponentPreparer(ctx context.Context, ID string, componentPath string, patchDocument []interface{}, ifMatch string, traceparent string, tracestate string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "componentPath": autorest.Encode("path",componentPath),
        "id": autorest.Encode("path",ID),
        }

            const APIVersion = "2020-10-31"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json-patch+json; charset=utf-8"),
autorest.AsPatch(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/digitaltwins/{id}/components/{componentPath}",pathParameters),
autorest.WithJSON(patchDocument),
autorest.WithQueryParameters(queryParameters))
        if len(ifMatch) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("If-Match",autorest.String(ifMatch)))
        }
        if len(traceparent) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("traceparent",autorest.String(traceparent)))
        }
        if len(tracestate) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("tracestate",autorest.String(tracestate)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // UpdateComponentSender sends the UpdateComponent request. The method will close the
    // http.Response Body if it receives an error.
    func (client DigitalTwinsClient) UpdateComponentSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // UpdateComponentResponder handles the response to the UpdateComponent request. The method always
    // closes the http.Response Body.
    func (client DigitalTwinsClient) UpdateComponentResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusAccepted,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// UpdateRelationship updates the properties on a relationship between two digital twins.
// Status codes:
// * 204 No Content
// * 400 Bad Request
// * InvalidArgument - The digital twin id or relationship id is invalid.
// * InvalidRelationship - The relationship is invalid.
// * JsonPatchInvalid - The JSON Patch provided is invalid.
// * ValidationFailed - The relationship content is invalid.
// * 404 Not Found
// * DigitalTwinNotFound - The digital twin was not found.
// * RelationshipNotFound - The relationship was not found.
// * 409 Conflict
// * RelationshipAlreadyExists - The relationship already exists.
// * 412 Precondition Failed
// * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
    // Parameters:
        // ID - the id of the digital twin. The id is unique within the service and case sensitive.
        // relationshipID - the id of the relationship. The id is unique within the digital twin and case sensitive.
        // patchDocument - JSON Patch description of the update to the relationship properties.
        // ifMatch - only perform the operation if the entity's etag matches one of the etags provided or * is
        // provided.
        // traceparent - identifies the request in a distributed tracing system.
        // tracestate - provides vendor-specific trace identification information and is a companion to traceparent.
func (client DigitalTwinsClient) UpdateRelationship(ctx context.Context, ID string, relationshipID string, patchDocument []interface{}, ifMatch string, traceparent string, tracestate string) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinsClient.UpdateRelationship")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        if err := validation.Validate([]validation.Validation{
        { TargetValue: patchDocument,
         Constraints: []validation.Constraint{	{Target: "patchDocument", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
        return result, validation.NewError("digitaltwinsrest.DigitalTwinsClient", "UpdateRelationship", err.Error())
        }

        req, err := client.UpdateRelationshipPreparer(ctx, ID, relationshipID, patchDocument, ifMatch, traceparent, tracestate)
    if err != nil {
    err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "UpdateRelationship", nil , "Failure preparing request")
    return
    }

        resp, err := client.UpdateRelationshipSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "UpdateRelationship", resp, "Failure sending request")
        return
        }

        result, err = client.UpdateRelationshipResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinsClient", "UpdateRelationship", resp, "Failure responding to request")
        return
        }

    return
}

    // UpdateRelationshipPreparer prepares the UpdateRelationship request.
    func (client DigitalTwinsClient) UpdateRelationshipPreparer(ctx context.Context, ID string, relationshipID string, patchDocument []interface{}, ifMatch string, traceparent string, tracestate string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        "relationshipId": autorest.Encode("path",relationshipID),
        }

            const APIVersion = "2020-10-31"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json-patch+json; charset=utf-8"),
autorest.AsPatch(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/digitaltwins/{id}/relationships/{relationshipId}",pathParameters),
autorest.WithJSON(patchDocument),
autorest.WithQueryParameters(queryParameters))
        if len(ifMatch) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("If-Match",autorest.String(ifMatch)))
        }
        if len(traceparent) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("traceparent",autorest.String(traceparent)))
        }
        if len(tracestate) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("tracestate",autorest.String(tracestate)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // UpdateRelationshipSender sends the UpdateRelationship request. The method will close the
    // http.Response Body if it receives an error.
    func (client DigitalTwinsClient) UpdateRelationshipSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // UpdateRelationshipResponder handles the response to the UpdateRelationship request. The method always
    // closes the http.Response Body.
    func (client DigitalTwinsClient) UpdateRelationshipResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

