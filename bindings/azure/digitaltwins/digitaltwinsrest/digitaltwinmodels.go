package digitaltwinsrest

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
    "github.com/Azure/go-autorest/autorest/validation"
)

// DigitalTwinModelsClient is the a service for managing and querying digital twins and digital twin models.
type DigitalTwinModelsClient struct {
    BaseClient
}
// NewDigitalTwinModelsClient creates an instance of the DigitalTwinModelsClient client.
func NewDigitalTwinModelsClient() DigitalTwinModelsClient {
    return NewDigitalTwinModelsClientWithBaseURI(DefaultBaseURI, )
}

// NewDigitalTwinModelsClientWithBaseURI creates an instance of the DigitalTwinModelsClient client using a custom
// endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure
// stack).
    func NewDigitalTwinModelsClientWithBaseURI(baseURI string, ) DigitalTwinModelsClient {
        return DigitalTwinModelsClient{ NewWithBaseURI(baseURI, )}
    }

// Add uploads one or more models. When any error occurs, no models are uploaded.
// Status codes:
// * 201 Created
// * 400 Bad Request
// * DTDLParserError - The models provided are not valid DTDL.
// * InvalidArgument - The model id is invalid.
// * LimitExceeded - The maximum number of model ids allowed in 'dependenciesFor' has been reached.
// * ModelVersionNotSupported - The version of DTDL used is not supported.
// * 409 Conflict
// * ModelAlreadyExists - The model provided already exists.
    // Parameters:
        // models - an array of models to add.
        // traceparent - identifies the request in a distributed tracing system.
        // tracestate - provides vendor-specific trace identification information and is a companion to traceparent.
func (client DigitalTwinModelsClient) Add(ctx context.Context, models []interface{}, traceparent string, tracestate string) (result ListDigitalTwinsModelData, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinModelsClient.Add")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        if err := validation.Validate([]validation.Validation{
        { TargetValue: models,
         Constraints: []validation.Constraint{	{Target: "models", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "models", Name: validation.MinItems, Rule: 1, Chain: nil },
        	{Target: "models", Name: validation.UniqueItems, Rule: true, Chain: nil },
        }}}}}); err != nil {
        return result, validation.NewError("digitaltwinsrest.DigitalTwinModelsClient", "Add", err.Error())
        }

        req, err := client.AddPreparer(ctx, models, traceparent, tracestate)
    if err != nil {
    err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinModelsClient", "Add", nil , "Failure preparing request")
    return
    }

        resp, err := client.AddSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinModelsClient", "Add", resp, "Failure sending request")
        return
        }

        result, err = client.AddResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinModelsClient", "Add", resp, "Failure responding to request")
        return
        }

    return
}

    // AddPreparer prepares the Add request.
    func (client DigitalTwinModelsClient) AddPreparer(ctx context.Context, models []interface{}, traceparent string, tracestate string) (*http.Request, error) {
        const APIVersion = "2020-10-31"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json; charset=utf-8"),
autorest.AsPost(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPath("/models"),
autorest.WithQueryParameters(queryParameters))
        if models != nil && len(models) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithJSON(models))
        }
        if len(traceparent) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("traceparent",autorest.String(traceparent)))
        }
        if len(tracestate) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("tracestate",autorest.String(tracestate)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // AddSender sends the Add request. The method will close the
    // http.Response Body if it receives an error.
    func (client DigitalTwinModelsClient) AddSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // AddResponder handles the response to the Add request. The method always
    // closes the http.Response Body.
    func (client DigitalTwinModelsClient) AddResponder(resp *http.Response) (result ListDigitalTwinsModelData, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// Delete deletes a model. A model can only be deleted if no other models reference it.
// Status codes:
// * 204 No Content
// * 400 Bad Request
// * InvalidArgument - The model id is invalid.
// * MissingArgument - The model id was not provided.
// * 404 Not Found
// * ModelNotFound - The model was not found.
// * 409 Conflict
// * ModelReferencesNotDeleted - The model refers to models that are not deleted.
    // Parameters:
        // ID - the id for the model. The id is globally unique and case sensitive.
        // traceparent - identifies the request in a distributed tracing system.
        // tracestate - provides vendor-specific trace identification information and is a companion to traceparent.
func (client DigitalTwinModelsClient) Delete(ctx context.Context, ID string, traceparent string, tracestate string) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinModelsClient.Delete")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.DeletePreparer(ctx, ID, traceparent, tracestate)
    if err != nil {
    err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinModelsClient", "Delete", nil , "Failure preparing request")
    return
    }

        resp, err := client.DeleteSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinModelsClient", "Delete", resp, "Failure sending request")
        return
        }

        result, err = client.DeleteResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinModelsClient", "Delete", resp, "Failure responding to request")
        return
        }

    return
}

    // DeletePreparer prepares the Delete request.
    func (client DigitalTwinModelsClient) DeletePreparer(ctx context.Context, ID string, traceparent string, tracestate string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        }

            const APIVersion = "2020-10-31"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsDelete(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/models/{id}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(traceparent) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("traceparent",autorest.String(traceparent)))
        }
        if len(tracestate) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("tracestate",autorest.String(tracestate)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // DeleteSender sends the Delete request. The method will close the
    // http.Response Body if it receives an error.
    func (client DigitalTwinModelsClient) DeleteSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // DeleteResponder handles the response to the Delete request. The method always
    // closes the http.Response Body.
    func (client DigitalTwinModelsClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// GetByID retrieves model metadata and optionally the model definition.
// Status codes:
// * 200 OK
// * 400 Bad Request
// * InvalidArgument - The model id is invalid.
// * MissingArgument - The model id was not provided.
// * 404 Not Found
// * ModelNotFound - The model was not found.
    // Parameters:
        // ID - the id for the model. The id is globally unique and case sensitive.
        // includeModelDefinition - when true the model definition will be returned as part of the result.
        // traceparent - identifies the request in a distributed tracing system.
        // tracestate - provides vendor-specific trace identification information and is a companion to traceparent.
func (client DigitalTwinModelsClient) GetByID(ctx context.Context, ID string, includeModelDefinition *bool, traceparent string, tracestate string) (result DigitalTwinsModelData, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinModelsClient.GetByID")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetByIDPreparer(ctx, ID, includeModelDefinition, traceparent, tracestate)
    if err != nil {
    err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinModelsClient", "GetByID", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetByIDSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinModelsClient", "GetByID", resp, "Failure sending request")
        return
        }

        result, err = client.GetByIDResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinModelsClient", "GetByID", resp, "Failure responding to request")
        return
        }

    return
}

    // GetByIDPreparer prepares the GetByID request.
    func (client DigitalTwinModelsClient) GetByIDPreparer(ctx context.Context, ID string, includeModelDefinition *bool, traceparent string, tracestate string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        }

            const APIVersion = "2020-10-31"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if includeModelDefinition != nil {
        queryParameters["includeModelDefinition"] = autorest.Encode("query",*includeModelDefinition)
            } else {
            queryParameters["includeModelDefinition"] = autorest.Encode("query",false)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/models/{id}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(traceparent) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("traceparent",autorest.String(traceparent)))
        }
        if len(tracestate) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("tracestate",autorest.String(tracestate)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetByIDSender sends the GetByID request. The method will close the
    // http.Response Body if it receives an error.
    func (client DigitalTwinModelsClient) GetByIDSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetByIDResponder handles the response to the GetByID request. The method always
    // closes the http.Response Body.
    func (client DigitalTwinModelsClient) GetByIDResponder(resp *http.Response) (result DigitalTwinsModelData, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// List retrieves model metadata and, optionally, model definitions.
// Status codes:
// * 200 OK
// * 400 Bad Request
// * InvalidArgument - The model id is invalid.
// * LimitExceeded - The maximum number of model ids allowed in 'dependenciesFor' has been reached.
// * 404 Not Found
// * ModelNotFound - The model was not found.
    // Parameters:
        // dependenciesFor - the set of the models which will have their dependencies retrieved. If omitted, all models
        // are retrieved.
        // includeModelDefinition - when true the model definition will be returned as part of the result.
        // maxItemsPerPage - the maximum number of items to retrieve per request. The server may choose to return less
        // than the requested number.
        // traceparent - identifies the request in a distributed tracing system.
        // tracestate - provides vendor-specific trace identification information and is a companion to traceparent.
func (client DigitalTwinModelsClient) List(ctx context.Context, dependenciesFor []string, includeModelDefinition *bool, maxItemsPerPage *int32, traceparent string, tracestate string) (result PagedDigitalTwinsModelDataCollectionPage, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinModelsClient.List")
        defer func() {
            sc := -1
        if result.pdtmdc.Response.Response != nil {
        sc = result.pdtmdc.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        result.fn = client.listNextResults
    req, err := client.ListPreparer(ctx, dependenciesFor, includeModelDefinition, maxItemsPerPage, traceparent, tracestate)
    if err != nil {
    err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinModelsClient", "List", nil , "Failure preparing request")
    return
    }

        resp, err := client.ListSender(req)
        if err != nil {
        result.pdtmdc.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinModelsClient", "List", resp, "Failure sending request")
        return
        }

        result.pdtmdc, err = client.ListResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinModelsClient", "List", resp, "Failure responding to request")
        return
        }
            if result.pdtmdc.hasNextLink() && result.pdtmdc.IsEmpty() {
            err = result.NextWithContext(ctx)
            return
            }

    return
}

    // ListPreparer prepares the List request.
    func (client DigitalTwinModelsClient) ListPreparer(ctx context.Context, dependenciesFor []string, includeModelDefinition *bool, maxItemsPerPage *int32, traceparent string, tracestate string) (*http.Request, error) {
        const APIVersion = "2020-10-31"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if dependenciesFor != nil && len(dependenciesFor) > 0 {
        queryParameters["dependenciesFor"] = dependenciesFor
        }
        if includeModelDefinition != nil {
        queryParameters["includeModelDefinition"] = autorest.Encode("query",*includeModelDefinition)
            } else {
            queryParameters["includeModelDefinition"] = autorest.Encode("query",false)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPath("/models"),
autorest.WithQueryParameters(queryParameters))
        if maxItemsPerPage != nil {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("max-items-per-page",autorest.String(*maxItemsPerPage)))
        }
        if len(traceparent) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("traceparent",autorest.String(traceparent)))
        }
        if len(tracestate) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("tracestate",autorest.String(tracestate)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // ListSender sends the List request. The method will close the
    // http.Response Body if it receives an error.
    func (client DigitalTwinModelsClient) ListSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // ListResponder handles the response to the List request. The method always
    // closes the http.Response Body.
    func (client DigitalTwinModelsClient) ListResponder(resp *http.Response) (result PagedDigitalTwinsModelDataCollection, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

            // listNextResults retrieves the next set of results, if any.
            func (client DigitalTwinModelsClient) listNextResults(ctx context.Context, lastResults PagedDigitalTwinsModelDataCollection) (result PagedDigitalTwinsModelDataCollection, err error) {
            req, err := lastResults.pagedDigitalTwinsModelDataCollectionPreparer(ctx)
            if err != nil {
            return result, autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinModelsClient", "listNextResults", nil , "Failure preparing next results request")
            }
            if req == nil {
            return
            }
            resp, err := client.ListSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            return result, autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinModelsClient", "listNextResults", resp, "Failure sending next results request")
            }
            result, err = client.ListResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinModelsClient", "listNextResults", resp, "Failure responding to next results request")
            }
            return
                    }

            // ListComplete enumerates all values, automatically crossing page boundaries as required.
            func (client DigitalTwinModelsClient) ListComplete(ctx context.Context, dependenciesFor []string, includeModelDefinition *bool, maxItemsPerPage *int32, traceparent string, tracestate string) (result PagedDigitalTwinsModelDataCollectionIterator, err error) {
            if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinModelsClient.List")
            defer func() {
            sc := -1
            if result.Response().Response.Response != nil {
            sc = result.page.Response().Response.Response.StatusCode
            }
            tracing.EndSpan(ctx, sc, err)
            }()
            }
                    result.page, err = client.List(ctx, dependenciesFor, includeModelDefinition, maxItemsPerPage, traceparent, tracestate)
                            return
            }

// Update updates the metadata for a model.
// Status codes:
// * 204 No Content
// * 400 Bad Request
// * InvalidArgument - The model id is invalid.
// * JsonPatchInvalid - The JSON Patch provided is invalid.
// * MissingArgument - The model id was not provided.
// * 404 Not Found
// * ModelNotFound - The model was not found.
// * 409 Conflict
// * ModelReferencesNotDecommissioned - The model refers to models that are not decommissioned.
    // Parameters:
        // ID - the id for the model. The id is globally unique and case sensitive.
        // updateModel - an update specification described by JSON Patch. Only the decommissioned property can be
        // replaced.
        // traceparent - identifies the request in a distributed tracing system.
        // tracestate - provides vendor-specific trace identification information and is a companion to traceparent.
func (client DigitalTwinModelsClient) Update(ctx context.Context, ID string, updateModel []interface{}, traceparent string, tracestate string) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DigitalTwinModelsClient.Update")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        if err := validation.Validate([]validation.Validation{
        { TargetValue: updateModel,
         Constraints: []validation.Constraint{	{Target: "updateModel", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
        return result, validation.NewError("digitaltwinsrest.DigitalTwinModelsClient", "Update", err.Error())
        }

        req, err := client.UpdatePreparer(ctx, ID, updateModel, traceparent, tracestate)
    if err != nil {
    err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinModelsClient", "Update", nil , "Failure preparing request")
    return
    }

        resp, err := client.UpdateSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinModelsClient", "Update", resp, "Failure sending request")
        return
        }

        result, err = client.UpdateResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "digitaltwinsrest.DigitalTwinModelsClient", "Update", resp, "Failure responding to request")
        return
        }

    return
}

    // UpdatePreparer prepares the Update request.
    func (client DigitalTwinModelsClient) UpdatePreparer(ctx context.Context, ID string, updateModel []interface{}, traceparent string, tracestate string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        }

            const APIVersion = "2020-10-31"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json-patch+json; charset=utf-8"),
autorest.AsPatch(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/models/{id}",pathParameters),
autorest.WithJSON(updateModel),
autorest.WithQueryParameters(queryParameters))
        if len(traceparent) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("traceparent",autorest.String(traceparent)))
        }
        if len(tracestate) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("tracestate",autorest.String(tracestate)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // UpdateSender sends the Update request. The method will close the
    // http.Response Body if it receives an error.
    func (client DigitalTwinModelsClient) UpdateSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // UpdateResponder handles the response to the Update request. The method always
    // closes the http.Response Body.
    func (client DigitalTwinModelsClient) UpdateResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

